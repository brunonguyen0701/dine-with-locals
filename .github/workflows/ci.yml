name: CI & CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            server/package-lock.json
            client/package-lock.json

      - name: Install dependencies
        run: npm run setup

      - name: Lint code
        run: |
          cd server && npm run lint
          cd ../client && npm run lint

      - name: Type check
        run: |
          cd server && npm run type-check
          cd ../client && npx tsc -b --noEmit

      - name: Run tests
        run: npm run test:ci

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4   

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          cd server
          docker build -t bruno0701/local-taste-backend .

      - name: Push Docker Image
        run: docker push bruno0701/local-taste-backend:latest

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      - name: Build frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        run: |
          cd client
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/dist/

  deploy-backend:
    needs: [test, build-backend]
    runs-on: self-hosted
    steps:
      - name: Pull Docker Image
        run: docker pull bruno0701/local-taste-backend:latest

      - name: Delete old containers
        run: docker rm -f local-taste-backend-container

      - name: Run Docker Container
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          SECRET: ${{ secrets.SECRET }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
        run: |
          docker run -d -p 4000:4000 \
            -e MONGO_URI="${MONGO_URI}" \
            -e CLOUDINARY_CLOUD_NAME="${CLOUDINARY_CLOUD_NAME}" \
            -e CLOUDINARY_API_KEY="${CLOUDINARY_API_KEY}" \
            -e CLOUDINARY_API_SECRET="${CLOUDINARY_API_SECRET}" \
            -e SECRET="${SECRET}" \
            -e GOOGLE_MAPS_API_KEY="${GOOGLE_MAPS_API_KEY}" \
            -e STRIPE_SECRET_KEY="${STRIPE_SECRET_KEY}" \
            -e STRIPE_PUBLISHABLE_KEY="${STRIPE_PUBLISHABLE_KEY}" \
            -e NODE_ENV="${NODE_ENV}" \
            --name local-taste-backend-container \
            bruno0701/local-taste-backend:latest

  deploy-frontend:
    needs: [test, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"  